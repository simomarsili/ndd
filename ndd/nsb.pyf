!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module fnsb ! in
interface  ! in :fnsb
        subroutine plugin(n,counts,estimate) ! in :fnsb:estimators.f90
            use iso_fortran_env
            integer(4), optional,intent(in),check(len(counts)>=n),depend(counts) :: n=len(counts)
            integer(4) dimension(n),intent(in) :: counts
            real(8) intent(out) :: estimate
        end subroutine plugin
        subroutine pseudo(n,counts,nc,alpha,estimate) ! in :fnsb:estimators.f90
            use iso_fortran_env
            integer(4), optional,intent(in),check(len(counts)>=n),depend(counts) :: n=len(counts)
            integer(4) dimension(n),intent(in) :: counts
            integer(4) intent(in) :: nc
            real(8) intent(in) :: alpha
            real(8) intent(out) :: estimate
        end subroutine pseudo
        subroutine dirichlet(n,counts,nc,alpha,estimate) ! in :fnsb:estimators.f90
            use iso_fortran_env
            use dirichlet_mod, only: h_bayes
            integer(4), optional,intent(in),check(len(counts)>=n),depend(counts) :: n=len(counts)
            integer(4) dimension(n),intent(in) :: counts
            real(8) intent(in) :: nc
            real(8) intent(in) :: alpha
            real(8) intent(out) :: estimate
        end subroutine dirichlet
        subroutine nsb(n,counts,nc,estimate,err_estimate) ! in :fnsb:estimators.f90
            use iso_fortran_env
            use nsb_mod, only: compute_integration_range
            use dirichlet_mod, only: compute_multiplicities,initialize_dirichlet,dirichlet_finalize
            integer(4), optional,intent(in),check(len(counts)>=n),depend(counts) :: n=len(counts)
            integer(4) dimension(n),intent(in) :: counts
            real(8) intent(in) :: nc
            real(8) intent(out) :: estimate
            real(8) intent(out) :: err_estimate
          end subroutine nsb
        subroutine phony_1(n,counts,nc,estimate,err_estimate) ! in :fnsb:estimators.f90
            use iso_fortran_env
            use nsb_mod, only: compute_integration_range
            use dirichlet_mod, only: compute_multiplicities,initialize_dirichlet,dirichlet_finalize
            integer(4), optional,intent(in),check(len(counts)>=n),depend(counts) :: n=len(counts)
            integer(4) dimension(n),intent(in) :: counts
            real(8) intent(in) :: nc
            real(8) intent(out) :: estimate
            real(8) intent(out) :: err_estimate
        end subroutine phony_1
        subroutine phony_2(n,counts,nc,estimate,err_estimate) ! in :fnsb:estimators.f90
            use iso_fortran_env
            use nsb_mod, only: compute_integration_range
            use dirichlet_mod, only: compute_multiplicities,initialize_dirichlet,dirichlet_finalize
            integer(4), optional,intent(in),check(len(counts)>=n),depend(counts) :: n=len(counts)
            integer(4) dimension(n),intent(in) :: counts
            real(8) intent(in) :: nc
            real(8) intent(out) :: estimate
            real(8) intent(out) :: err_estimate
        end subroutine phony_2
        subroutine phony_3(n,counts,nc,estimate,err_estimate) ! in :fnsb:estimators.f90
            use iso_fortran_env
            use nsb_mod, only: compute_integration_range
            use dirichlet_mod, only: compute_multiplicities,initialize_dirichlet,dirichlet_finalize
            integer(4), optional,intent(in),check(len(counts)>=n),depend(counts) :: n=len(counts)
            integer(4) dimension(n),intent(in) :: counts
            real(8) intent(in) :: nc
            real(8) intent(out) :: estimate
            real(8) intent(out) :: err_estimate
        end subroutine phony_3
        subroutine phony_4(n,counts,nc,estimate,err_estimate) ! in :fnsb:estimators.f90
            use iso_fortran_env
            use nsb_mod, only: compute_integration_range
            use dirichlet_mod, only: compute_multiplicities,initialize_dirichlet,dirichlet_finalize
            integer(4), optional,intent(in),check(len(counts)>=n),depend(counts) :: n=len(counts)
            integer(4) dimension(n),intent(in) :: counts
            real(8) intent(in) :: nc
            real(8) intent(out) :: estimate
            real(8) intent(out) :: err_estimate
        end subroutine phony_4
        subroutine plugin2d(n,m,counts,estimate) ! in :fnsb:estimators.f90
            use iso_fortran_env
            integer(4), optional,intent(in),check(shape(counts,0)==n),depend(counts) :: n=shape(counts,0)
            integer(4), optional,intent(in),check(shape(counts,1)==m),depend(counts) :: m=shape(counts,1)
            integer(4) dimension(n,m),intent(in) :: counts
            real(8) dimension(m),intent(out),depend(m) :: estimate
        end subroutine plugin2d
        subroutine pseudo2d(n,m,counts,nc,alpha,estimate) ! in :fnsb:estimators.f90
            use iso_fortran_env
            integer(4), optional,intent(in),check(shape(counts,0)==n),depend(counts) :: n=shape(counts,0)
            integer(4), optional,intent(in),check(shape(counts,1)==m),depend(counts) :: m=shape(counts,1)
            integer(4) dimension(n,m),intent(in) :: counts
            integer(4) intent(in) :: nc
            real(8) intent(in) :: alpha
            real(8) dimension(m),intent(out),depend(m) :: estimate
        end subroutine pseudo2d
        subroutine dirichlet2d(n,m,counts,nc,alpha,estimate) ! in :fnsb:estimators.f90
            use iso_fortran_env
            integer(4), optional,intent(in),check(shape(counts,0)==n),depend(counts) :: n=shape(counts,0)
            integer(4), optional,intent(in),check(shape(counts,1)==m),depend(counts) :: m=shape(counts,1)
            integer(4) dimension(n,m),intent(in) :: counts
            real(8) intent(in) :: nc
            real(8) intent(in) :: alpha
            real(8) dimension(m),intent(out),depend(m) :: estimate
        end subroutine dirichlet2d
        subroutine nsb2d(n,m,counts,nc,estimate,err_estimate) ! in :fnsb:estimators.f90
            use iso_fortran_env
            integer(4), optional,intent(in),check(shape(counts,0)==n),depend(counts) :: n=shape(counts,0)
            integer(4), optional,intent(in),check(shape(counts,1)==m),depend(counts) :: m=shape(counts,1)
            integer(4) dimension(n,m),intent(in) :: counts
            real(8) intent(in) :: nc
            real(8) dimension(m),intent(out),depend(m) :: estimate
            real(8) dimension(m),intent(out),depend(m) :: err_estimate
        end subroutine nsb2d
        subroutine gamma0(x,y) ! in :fnsb:estimators.f90
            use iso_fortran_env
            use gamma_funcs, only: digamma
            real(8) intent(in) :: x
            real(8) intent(out) :: y
        end subroutine gamma0
        subroutine gamma1(x,y) ! in :fnsb:estimators.f90
            use iso_fortran_env
            use gamma_funcs, only: trigamma
            real(8) intent(in) :: x
            real(8) intent(out) :: y
        end subroutine gamma1
    end interface
end python module fnsb

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
